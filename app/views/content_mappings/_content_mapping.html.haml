%li.content{:id => "section_content_#{content_mapping.id}", :class => content_mapping.asset.class.name.tableize.singularize, :section_id => content_mapping.section.id, :page_id => content_mapping.page.id}
  %b= content_mapping.asset.title
  %i= content_mapping.asset.class.name.to_s
  %p.tools
    = link_to "Edit", edit_polymorphic_path(content_mapping.asset)
    |
    = link_to 'Remove', content_mapping, :confirm => 'Are you sure?', :method => :delete
  = drop_receiving_element "section_content_#{content_mapping.id}", :url => new_page_content_mapping_path(@page), :hoverclass => 'hover', :onDrop => "function(draggable_element, droppable_element, event) {if(draggable_element.hasClassName('existing_asset')){ new Ajax.Updater(droppable_element, '/pages/#{@page.id}/sections/#{section.id}/content_mappings/', {method: 'post', insertion: Insertion.After, parameters: 'content_mapping[asset_id]='+draggable_element.getAttribute('asset_id')+'&content_mapping[asset_type_id]='+draggable_element.getAttribute('asset_type_id')+'&content_mapping[section_id]='+droppable_element.getAttribute('section_id')+'&content_mapping[page_id]='+droppable_element.getAttribute('page_id')})} if(draggable_element.hasClassName('asset_shelf')){console.log(droppable_element); new Ajax.Updater(droppable_element, '/pages/#{@page.id}/sections/#{section.id}/content_mappings/new', {method: 'get', insertion: Insertion.After, parameters: 'asset_type='+draggable_element.getAttribute('asset_type')+'&section_id='+droppable_element.getAttribute('section_id')}) }}"
  / = drop_receiving_element "section_content_#{content_mapping.id}", :url => new_page_content_mapping_path(@page), :hoverclass => 'hover', :onDrop => "function(draggable_element, droppable_element, event) {app.handle_dropped_content(draggable_element, droppable_element, event, '/pages/#{@page.id}/sections/#{content_mapping.section.id}/content_mappings/new', 'section_#{content_mapping.section.title.downcase.underscore}_content'}"  
